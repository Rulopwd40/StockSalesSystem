package com.libcentro.demo.view.venta;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class VentaFrame extends JFrame {
    private JPanel panelVenta;
    private JTable table;
    private JTextField codBar;
    private JTextField cant;
    private JButton agregarEnterButton;
    private JButton agregarProductoFueraDeButton;
    private JButton generarTicketF3Button;
    private JButton cancelarEscButton;
    private JLabel totalPrice;
    private JPanel agregarProductoFieldPanel;
    private JTextField descuentoField;
    private JButton descuentoButton;

    public VentaFrame (){
        setContentPane (panelVenta);
        setSize (945, 630);
        setLocationRelativeTo (null);
        createTable ();
        setFocusable (true);

    }

    private void createTable (){
        table.setModel (new DefaultTableModel (
                null,
                new String[]{"Producto", "Cantidad", "Descuento(%)", "Precio"}
        ) {
            @Override
            public boolean isCellEditable ( int row, int column ){
                // Aquí defines qué columnas son editables
                switch (column) {
                    case 0:
                        return false;
                    case 1:
                        return true;// Cantidad
                    case 2:
                        return true;// Descuento(%)
                    case 3: // Precio
                        return true; // Estas columnas son editables
                    default:
                        return false; // Las demás columnas no son editables
                }
            }

            @Override
            public Class<?> getColumnClass ( int columnIndex ){
                switch (columnIndex) {
                    case 0: // Producto
                        return String.class;
                    case 1: // Cantidad
                        return Integer.class; // o Double.class si manejas cantidades decimales
                    case 2: // Descuento(%)
                        return Float.class; // Descuento en porcentaje como decimal
                    case 3: // Precio
                        return Float.class; // Precio como decimal
                    default:
                        return Object.class;
                }
            }
        });
        table.getTableHeader ().setReorderingAllowed (false);


    }

    public void setCodFocus (){
        codBar.requestFocusInWindow ();
    }

    public JButton getAgregarEnterButton (){
        return agregarEnterButton;
    }

    public JButton getAgregarProductoFueraDeButton (){
        return agregarProductoFueraDeButton;
    }

    public JButton getGenerarTicketF3Button (){
        return generarTicketF3Button;
    }

    public JButton getCancelarEscButton (){
        return cancelarEscButton;
    }

    public JTextField getCodBar (){
        return codBar;
    }

    public JTextField getCant (){
        return cant;
    }

    public JTable getTable (){
        return table;
    }

    public JLabel getTotalPrice (){
        return totalPrice;
    }

    public void setTotalPrice ( JLabel totalPrice ){
        this.totalPrice = totalPrice;
    }

    public JPanel getAgregarProductoFieldPanel (){
        return agregarProductoFieldPanel;
    }

    public void setCantFocus (){
        cant.requestFocusInWindow ();
    }

    public JButton getDescuentoButton (){
        return descuentoButton;
    }

    public JTextField getDescuentoField (){
        return descuentoField;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$ ();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$ (){
        panelVenta = new JPanel ();
        panelVenta.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (5, 7, new Insets (0, 0, 0, 0), -1, -1));
        panelVenta.setBackground (new Color (-1));
        final JPanel panel1 = new JPanel ();
        panel1.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (1, 1, new Insets (10, 0, 0, 0), -1, -1));
        panel1.setBackground (new Color (-1));
        panel1.setEnabled (true);
        Font panel1Font = this.$$$getFont$$$ ("Courier New", -1, -1, panel1.getFont ());
        if ( panel1Font != null ) panel1.setFont (panel1Font);
        panelVenta.add (panel1, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 7, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel ();
        Font label1Font = this.$$$getFont$$$ (null, -1, 20, label1.getFont ());
        if ( label1Font != null ) label1.setFont (label1Font);
        label1.setText ("Venta");
        panel1.add (label1, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane ();
        scrollPane1.setBackground (new Color (-1));
        panelVenta.add (scrollPane1, new com.intellij.uiDesigner.core.GridConstraints (2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table = new JTable ();
        table.setAutoResizeMode (2);
        table.setDropMode (DropMode.ON);
        table.setFillsViewportHeight (false);
        scrollPane1.setViewportView (table);
        final JPanel panel2 = new JPanel ();
        panel2.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (4, 1, new Insets (0, 0, 0, 0), -1, -1));
        panel2.setBackground (new Color (-1));
        panelVenta.add (panel2, new com.intellij.uiDesigner.core.GridConstraints (1, 4, 2, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel ();
        label2.setText ("Agregar Producto de Stock");
        panel2.add (label2, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel ();
        panel3.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (3, 2, new Insets (0, 0, 0, 0), -1, -1));
        panel3.setBackground (new Color (-1));
        panel2.add (panel3, new com.intellij.uiDesigner.core.GridConstraints (1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        agregarProductoFieldPanel = new JPanel ();
        agregarProductoFieldPanel.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (4, 2, new Insets (0, 0, 0, 0), -1, -1));
        agregarProductoFieldPanel.setBackground (new Color (-1));
        panel3.add (agregarProductoFieldPanel, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        agregarProductoFieldPanel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createEmptyBorder (), "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        codBar = new JTextField ();
        codBar.setText ("");
        agregarProductoFieldPanel.add (codBar, new com.intellij.uiDesigner.core.GridConstraints (1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension (150, -1), null, 0, false));
        final JLabel label3 = new JLabel ();
        label3.setText ("Codigo de producto:");
        agregarProductoFieldPanel.add (label3, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel ();
        label4.setText ("Cantidad:");
        agregarProductoFieldPanel.add (label4, new com.intellij.uiDesigner.core.GridConstraints (2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cant = new JTextField ();
        cant.setText ("");
        agregarProductoFieldPanel.add (cant, new com.intellij.uiDesigner.core.GridConstraints (3, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension (150, -1), null, 0, false));
        agregarEnterButton = new JButton ();
        agregarEnterButton.setBackground (new Color (-12406529));
        agregarEnterButton.setEnabled (true);
        agregarEnterButton.setForeground (new Color (-1));
        agregarEnterButton.setHideActionText (false);
        agregarEnterButton.setText ("Agregar(Enter)");
        panel3.add (agregarEnterButton, new com.intellij.uiDesigner.core.GridConstraints (0, 1, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel ();
        panel4.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (1, 1, new Insets (0, 0, 0, 0), -1, -1));
        panel3.add (panel4, new com.intellij.uiDesigner.core.GridConstraints (2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        agregarProductoFueraDeButton = new JButton ();
        agregarProductoFueraDeButton.setBackground (new Color (-1));
        agregarProductoFueraDeButton.setEnabled (true);
        agregarProductoFueraDeButton.setForeground (new Color (-12406529));
        agregarProductoFueraDeButton.setHideActionText (false);
        agregarProductoFueraDeButton.setText ("Agregar Producto fuera de Stock(F2)");
        panel4.add (agregarProductoFueraDeButton, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel ();
        panel5.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (2, 1, new Insets (0, 0, 0, 0), -1, -1));
        panel5.setBackground (new Color (-1));
        panel2.add (panel5, new com.intellij.uiDesigner.core.GridConstraints (3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        generarTicketF3Button = new JButton ();
        generarTicketF3Button.setBackground (new Color (-12406529));
        generarTicketF3Button.setEnabled (true);
        generarTicketF3Button.setForeground (new Color (-1));
        generarTicketF3Button.setHideActionText (false);
        generarTicketF3Button.setText ("Generar Ticket(F3)");
        panel5.add (generarTicketF3Button, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelarEscButton = new JButton ();
        cancelarEscButton.setBackground (new Color (-1));
        cancelarEscButton.setEnabled (true);
        cancelarEscButton.setForeground (new Color (-12406529));
        cancelarEscButton.setHideActionText (false);
        cancelarEscButton.setText ("Cancelar(Esc)");
        panel5.add (cancelarEscButton, new com.intellij.uiDesigner.core.GridConstraints (1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer ();
        panel2.add (spacer1, new com.intellij.uiDesigner.core.GridConstraints (2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer ();
        panelVenta.add (spacer2, new com.intellij.uiDesigner.core.GridConstraints (2, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer ();
        panelVenta.add (spacer3, new com.intellij.uiDesigner.core.GridConstraints (2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer ();
        panelVenta.add (spacer4, new com.intellij.uiDesigner.core.GridConstraints (2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer5 = new com.intellij.uiDesigner.core.Spacer ();
        panelVenta.add (spacer5, new com.intellij.uiDesigner.core.GridConstraints (4, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel6 = new JPanel ();
        panel6.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (1, 4, new Insets (0, 0, 0, 0), -1, -1));
        panel6.setBackground (new Color (-1));
        panel6.setToolTipText ("");
        panelVenta.add (panel6, new com.intellij.uiDesigner.core.GridConstraints (3, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel7 = new JPanel ();
        panel7.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (1, 2, new Insets (5, 5, 5, 5), -1, -1));
        panel7.setBackground (new Color (-1));
        panel6.add (panel7, new com.intellij.uiDesigner.core.GridConstraints (0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel7.setBorder (BorderFactory.createTitledBorder (BorderFactory.createEmptyBorder (), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label5 = new JLabel ();
        label5.setBackground (new Color (-16776701));
        label5.setEnabled (true);
        Font label5Font = this.$$$getFont$$$ (null, Font.BOLD, 16, label5.getFont ());
        if ( label5Font != null ) label5.setFont (label5Font);
        label5.setForeground (new Color (-16776701));
        label5.setText ("Total:");
        panel7.add (label5, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel8 = new JPanel ();
        panel8.setLayout (new com.intellij.uiDesigner.core.GridLayoutManager (1, 1, new Insets (0, 40, 0, 0), -1, -1));
        panel8.setBackground (new Color (-1));
        panel7.add (panel8, new com.intellij.uiDesigner.core.GridConstraints (0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel8.setBorder (BorderFactory.createTitledBorder (BorderFactory.createLoweredBevelBorder (), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        totalPrice = new JLabel ();
        totalPrice.setBackground (new Color (-2306));
        totalPrice.setEnabled (true);
        Font totalPriceFont = this.$$$getFont$$$ (null, Font.BOLD, 14, totalPrice.getFont ());
        if ( totalPriceFont != null ) totalPrice.setFont (totalPriceFont);
        totalPrice.setForeground (new Color (-16777216));
        totalPrice.setText ("00,00");
        panel8.add (totalPrice, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descuentoField = new JTextField ();
        descuentoField.setBackground (new Color (-1));
        panel6.add (descuentoField, new com.intellij.uiDesigner.core.GridConstraints (0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension (75, -1), null, 0, false));
        descuentoButton = new JButton ();
        descuentoButton.setBackground (new Color (-12406529));
        descuentoButton.setEnabled (true);
        descuentoButton.setForeground (new Color (-1));
        descuentoButton.setText ("Descuento");
        panel6.add (descuentoButton, new com.intellij.uiDesigner.core.GridConstraints (0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer6 = new com.intellij.uiDesigner.core.Spacer ();
        panel6.add (spacer6, new com.intellij.uiDesigner.core.GridConstraints (0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$ ( String fontName, int style, int size, Font currentFont ){
        if ( currentFont == null ) return null;
        String resultName;
        if ( fontName == null ) {
            resultName = currentFont.getName ();
        } else {
            Font testFont = new Font (fontName, Font.PLAIN, 10);
            if ( testFont.canDisplay ('a') && testFont.canDisplay ('1') ) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName ();
            }
        }
        Font font = new Font (resultName, style >= 0 ? style : currentFont.getStyle (), size >= 0 ? size : currentFont.getSize ());
        boolean isMac = System.getProperty ("os.name", "").toLowerCase (Locale.ENGLISH).startsWith ("mac");
        Font fontWithFallback = isMac ? new Font (font.getFamily (), font.getStyle (), font.getSize ()) : new StyleContext ().getFont (font.getFamily (), font.getStyle (), font.getSize ());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource (fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$ (){
        return panelVenta;
    }
}
